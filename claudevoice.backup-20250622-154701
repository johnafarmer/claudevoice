#!/usr/bin/env node

/**
 * ClaudeVoice - TTS for Claude Code with database mode support
 */

const { spawn, exec } = require('child_process');
const os = require('os');
const fs = require('fs');
const path = require('path');

// Load Edge-TTS
let EdgeTTS;

// Get npm global root dynamically
let npmGlobalRoot;
try {
    npmGlobalRoot = require('child_process')
        .execSync('npm root -g', { encoding: 'utf8' })
        .trim();
} catch {}

const ttsLocations = [
    './node_modules/node-edge-tts',
    npmGlobalRoot && path.join(npmGlobalRoot, 'node-edge-tts'),
    path.join(os.homedir(), '.npm-global/lib/node_modules/node-edge-tts'),
    '/usr/local/lib/node_modules/node-edge-tts',
    '/opt/homebrew/lib/node_modules/node-edge-tts',
    'node-edge-tts'
].filter(Boolean);

for (const loc of ttsLocations) {
    try {
        EdgeTTS = require(loc).EdgeTTS;
        break;
    } catch {}
}

if (!EdgeTTS) {
    console.error('Error: node-edge-tts not found. Install with:');
    console.error('  npm install -g node-edge-tts');
    process.exit(1);
}

// Config paths
const CONFIG_PATH = path.join(os.homedir(), '.claudevoice-config.json');
const CLAUDE_DB_PATH = path.join(os.homedir(), '.claude/__store.db');

// Available Edge-TTS voices
const VOICES = [
    { id: 'en-US-ChristopherNeural', name: 'Christopher', desc: 'Deep, warm male voice' },
    { id: 'en-US-EricNeural', name: 'Eric', desc: 'Professional male voice' },
    { id: 'en-US-GuyNeural', name: 'Guy', desc: 'Friendly male voice' },
    { id: 'en-US-RogerNeural', name: 'Roger', desc: 'Mature, authoritative male' },
    { id: 'en-US-TonyNeural', name: 'Tony', desc: 'Energetic male voice' },
    { id: 'en-US-DavisNeural', name: 'Davis', desc: 'Young professional male' },
    { id: 'en-US-JasonNeural', name: 'Jason', desc: 'Casual male voice' },
    { id: 'en-US-AndrewNeural', name: 'Andrew', desc: 'Natural male voice' },
    { id: 'en-US-BrianNeural', name: 'Brian', desc: 'Clear male voice' },
    { id: 'en-GB-RyanNeural', name: 'Ryan (UK)', desc: 'British male voice' },
    { id: 'en-GB-ThomasNeural', name: 'Thomas (UK)', desc: 'Refined British male' },
    { id: 'en-AU-WilliamNeural', name: 'William (AU)', desc: 'Australian male voice' },
    { id: 'en-US-AriaNeural', name: 'Aria', desc: 'Pleasant female voice' },
    { id: 'en-US-JennyNeural', name: 'Jenny', desc: 'Friendly female voice' },
    { id: 'en-US-MichelleNeural', name: 'Michelle', desc: 'Professional female' }
];

// Load saved config
function loadConfig() {
    try {
        if (fs.existsSync(CONFIG_PATH)) {
            return JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
        }
    } catch {}
    return { voice: 'en-US-BrianNeural', mode: 'terminal' };
}

// Save config
function saveConfig(config) {
    try {
        fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
    } catch {}
}

// TTS setup
const config = loadConfig();
let currentVoice = config.voice;
let tts = new EdgeTTS({ voice: currentVoice });
let audioQueue = [];
let isPlaying = false;
let spokenMessages = new Set();
let lastMessageTimestamp = Math.floor(Date.now() / 1000);

// Track current audio process for killing
let currentAudioProcess = null;

// Play audio queue
async function playAudio() {
    if (isPlaying || audioQueue.length === 0) return;
    
    isPlaying = true;
    const text = audioQueue.shift();
    
    try {
        const tempFile = path.join(os.tmpdir(), `claude-${Date.now()}.mp3`);
        await tts.ttsPromise(text, tempFile);
        
        const player = process.platform === 'darwin' ? 'afplay' :
                       process.platform === 'win32' ? 'powershell' : 'aplay';
        const args = process.platform === 'win32' ? 
            ['-c', `(New-Object Media.SoundPlayer '${tempFile}').PlaySync()`] : [tempFile];
        
        currentAudioProcess = spawn(player, args, { stdio: 'ignore' });
        currentAudioProcess.on('exit', () => {
            try { fs.unlinkSync(tempFile); } catch {}
            currentAudioProcess = null;
            isPlaying = false;
            playAudio();
        });
    } catch {
        currentAudioProcess = null;
        isPlaying = false;
        playAudio();
    }
}

// Queue text for speaking
function speak(text) {
    const clean = text.trim();
    
    // Don't speak duplicates or partial duplicates
    if (spokenMessages.has(clean)) {
        return;
    }
    
    // Check if this is a substring of something we already spoke
    for (const spoken of spokenMessages) {
        if (spoken.includes(clean) || clean.includes(spoken)) {
            return;
        }
    }
    
    if (clean.length > 10) {
        spokenMessages.add(clean);
        audioQueue.push(clean);
        playAudio();
        
        // Clean up old messages after a while to prevent memory growth
        if (spokenMessages.size > 100) {
            const messages = Array.from(spokenMessages);
            messages.slice(0, 50).forEach(msg => spokenMessages.delete(msg));
        }
    }
}

// Stop all TTS immediately
function stopAllTTS() {
    audioQueue = [];
    
    if (currentAudioProcess) {
        try {
            currentAudioProcess.kill('SIGKILL');
        } catch {}
        currentAudioProcess = null;
    }
    
    isPlaying = false;
    spokenMessages.clear();
    messageBuffer = [];
    collectingMessage = false;
}

// DATABASE MODE - Read from clean SQLite database
function processMessageFromDB(messageJson) {
    try {
        const msg = JSON.parse(messageJson);
        if (!msg.content || !Array.isArray(msg.content)) return;
        
        msg.content.forEach(item => {
            if (item.type === 'text' && item.text) {
                const text = item.text.trim();
                
                // Skip tool-related messages
                if (!text.match(/^(Updating|Updated|Creating|Created|Running|Executing|Processing|Analyzing|Searching|Loading|Saving|Building|Installing|Deleting|Removing|Adding|Modifying)/i)) {
                    
                    // Split into sentences for better flow
                    const sentences = text
                        .split(/(?<=[.!?])\s+/)
                        .filter(s => s.trim().length > 15 && !s.includes('```'));
                    
                    sentences.forEach(sentence => {
                        speak(sentence.trim());
                    });
                }
            }
        });
    } catch (e) {
        // Skip malformed messages
    }
}

function queryNewMessages(callback) {
    const query = `SELECT message, timestamp FROM assistant_messages WHERE timestamp > ${lastMessageTimestamp} ORDER BY timestamp ASC`;
    
    exec(`sqlite3 "${CLAUDE_DB_PATH}" "${query}"`, (error, stdout) => {
        if (error) return callback();
        
        const lines = stdout.trim().split('\n').filter(l => l);
        lines.forEach(line => {
            const lastPipe = line.lastIndexOf('|');
            if (lastPipe > 0) {
                const messageJson = line.substring(0, lastPipe);
                const timestamp = parseInt(line.substring(lastPipe + 1));
                
                processMessageFromDB(messageJson);
                lastMessageTimestamp = timestamp;
            }
        });
        
        callback();
    });
}

function startDatabaseMode(args) {
    console.log('🎤 ClaudeVoice Database Mode - Clean TTS without terminal parsing!');
    console.log('Commands: //stfu or cvstfu! to stop TTS\n');
    
    if (!fs.existsSync(CLAUDE_DB_PATH)) {
        console.error('Claude database not found. Falling back to terminal mode...');
        return startTerminalMode(args);
    }
    
    // Spawn Claude
    const claudeBin = findClaude();
    const claude = spawn(claudeBin, args, {
        stdio: 'inherit',
        env: process.env
    });
    
    // Monitor database
    const checkInterval = setInterval(() => {
        queryNewMessages(() => {});
    }, 500);
    
    // Handle exit
    claude.on('exit', (code) => {
        clearInterval(checkInterval);
        setTimeout(() => {
            stopAllTTS();
            process.exit(code || 0);
        }, 2000);
    });
    
    // Handle interrupt
    process.on('SIGINT', () => {
        clearInterval(checkInterval);
        stopAllTTS();
        claude.kill('SIGINT');
    });
}

// TERMINAL MODE - Original parsing approach
let messageBuffer = [];
let collectingMessage = false;

function processLine(line) {
    // Check for //stfu or cvstfu! command
    if (line.includes('//stfu') || line.includes('cvstfu!')) {
        stopAllTTS();
        return;
    }
    
    // Check for /compact or /plan commands - clear history
    if (line.includes('/compact') || line.includes('/plan')) {
        spokenMessages.clear();
        return;
    }
    
    // Strip ANSI escape codes
    const strippedLine = line.replace(/\x1b\[[^m]*m/g, '').trim();
    
    // Check for white bullet (⏺) - ONLY process these
    if (strippedLine.startsWith('⏺')) {
        const afterBullet = strippedLine.substring(1).trim();
        
        if (afterBullet && 
            afterBullet.length > 10 &&
            !afterBullet.match(/^\w+\(/) &&
            !afterBullet.match(/^(Updating|Updated|Creating|Created|Running|Executing|Processing|Analyzing|Searching|Loading|Saving|Building|Installing|Deleting|Removing|Adding|Modifying)/i)) {
            
            messageBuffer = [afterBullet];
            collectingMessage = true;
        }
        return;
    }
    
    // If collecting a message
    if (collectingMessage) {
        if (!strippedLine || 
            strippedLine.startsWith('⏺') ||
            strippedLine.startsWith('✻') ||
            strippedLine.startsWith('✽') ||
            strippedLine.startsWith('·')) {
            
            if (messageBuffer.length > 0) {
                const fullMessage = messageBuffer.join(' ').trim();
                if (!fullMessage.match(/^[a-z0-9\s]{1,10}$/i) && 
                    !fullMessage.match(/\b(2k1a|1a2k|1004l|99)\b/i)) {
                    speak(fullMessage);
                }
            }
            messageBuffer = [];
            collectingMessage = false;
            
            if (strippedLine.startsWith('⏺')) {
                processLine(line);
            }
        } else {
            if (strippedLine) {
                messageBuffer.push(strippedLine);
            }
        }
    }
}

function startTerminalMode(args) {
    console.log('🎤 ClaudeVoice Terminal Mode');
    console.log('Commands: //stfu or cvstfu! to stop TTS\n');
    
    const claudeBin = findClaude();
    const command = '/usr/bin/script';
    const commandArgs = ['-q', '/dev/null', claudeBin, ...args];
    
    const claude = spawn(command, commandArgs, {
        stdio: ['inherit', 'pipe', 'inherit'],
        env: { ...process.env, TERM: 'xterm-256color' },
        shell: false
    });
    
    let buffer = '';
    claude.stdout.on('data', (chunk) => {
        process.stdout.write(chunk);
        
        buffer += chunk.toString();
        const lines = buffer.split('\n');
        buffer = lines.pop() || '';
        
        for (const line of lines) {
            processLine(line);
        }
    });
    
    claude.on('exit', (code) => {
        if (buffer) {
            processLine(buffer);
        }
        
        if (collectingMessage && messageBuffer.length > 0) {
            const fullMessage = messageBuffer.join(' ').trim();
            if (!fullMessage.match(/^[a-z0-9\s]{1,10}$/i) && 
                !fullMessage.match(/\b(2k1a|1a2k|1004l|99)\b/i)) {
                speak(fullMessage);
            }
        }
        
        setTimeout(() => process.exit(code || 0), 200);
    });
    
    process.on('SIGINT', () => {
        stopAllTTS();
        claude.kill('SIGINT');
    });
}

// Find claude
function findClaude() {
    const paths = ['claude', '/usr/local/bin/claude', '/opt/homebrew/bin/claude'];
    for (const p of paths) {
        try {
            require('child_process').execSync(`which ${p}`, { stdio: 'ignore' });
            return p;
        } catch {}
    }
    console.error('Claude Code CLI not found');
    process.exit(1);
}

// Show voice menu
function showVoiceMenu() {
    console.log('\n🎙️  ClaudeVoice Settings\n');
    console.log('Available voices:\n');
    
    VOICES.forEach((voice, index) => {
        const isCurrent = voice.id === currentVoice;
        const marker = isCurrent ? '►' : ' ';
        const num = String(index + 1).padStart(2, ' ');
        const name = voice.name.padEnd(15);
        console.log(`${marker} ${num}. ${name} ${voice.desc}`);
    });
    
    console.log(`\nCurrent voice: ${VOICES.find(v => v.id === currentVoice)?.name || 'Unknown'}`);
    console.log(`Current mode: ${config.mode || 'terminal'}`);
    console.log('\nTo change voice: claudevoice --voice <number>');
    console.log('To change mode: claudevoice --mode <terminal|database>');
}

// Main
let args = process.argv.slice(2);

// Handle special commands
if (args[0] === '--help') {
    console.log('ClaudeVoice - TTS for Claude Code');
    console.log('Usage: claudevoice [options] [claude arguments]');
    console.log('\nOptions:');
    console.log('  --voice <number>     Change voice (1-15)');
    console.log('  --list-voices        List available voices');
    console.log('  --mode <mode>        Set mode: terminal or database');
    console.log('  --database           Use database mode for this session');
    console.log('  --help               Show this help');
    console.log('\nCommands during session:');
    console.log('  //stfu or cvstfu!    Stop TTS immediately');
    console.log('\nModes:');
    console.log('  terminal  - Parse terminal output (default)');
    console.log('  database  - Read from Claude\'s clean database (no parsing!)');
    process.exit(0);
} else if (args[0] === '--list-voices') {
    showVoiceMenu();
    process.exit(0);
} else if (args[0] === '--voice' && args[1]) {
    const num = parseInt(args[1]);
    if (num >= 1 && num <= VOICES.length) {
        const newVoice = VOICES[num - 1];
        config.voice = newVoice.id;
        saveConfig(config);
        console.log(`✓ Voice changed to ${newVoice.name}`);
        
        currentVoice = newVoice.id;
        tts = new EdgeTTS({ voice: currentVoice });
        audioQueue.push(`Hello! I'm ${newVoice.name}, your new Claude Code voice.`);
        playAudio();
        
        setTimeout(() => process.exit(0), 3000);
    } else {
        console.error('Invalid voice number. Use --list-voices to see options.');
        process.exit(1);
    }
    return;
} else if (args[0] === '--mode' && args[1]) {
    const mode = args[1].toLowerCase();
    if (mode === 'terminal' || mode === 'database') {
        config.mode = mode;
        saveConfig(config);
        console.log(`✓ Mode changed to ${mode}`);
        process.exit(0);
    } else {
        console.error('Invalid mode. Use: terminal or database');
        process.exit(1);
    }
    return;
}

// Filter out our own arguments
let useDatabase = config.mode === 'database' || args.includes('--database');
args = args.filter(arg => arg !== '--database');

if (args[0] === '--voice' || args[0] === '--mode') {
    args = args.slice(2);
}

// Join args if needed
if (args.length > 0 && !args[0].startsWith('-')) {
    args = [args.join(' ')];
}

// Start appropriate mode
if (useDatabase) {
    startDatabaseMode(args);
} else {
    startTerminalMode(args);
}