#!/usr/bin/env node

/**
 * ClaudeVoice - Simple and working with voice selection
 */

const { spawn } = require('child_process');
const os = require('os');
const fs = require('fs');
const path = require('path');

// Load Edge-TTS
let EdgeTTS;

// Get npm global root dynamically
let npmGlobalRoot;
try {
    npmGlobalRoot = require('child_process')
        .execSync('npm root -g', { encoding: 'utf8' })
        .trim();
} catch {}

const ttsLocations = [
    './node_modules/node-edge-tts',
    npmGlobalRoot && path.join(npmGlobalRoot, 'node-edge-tts'),
    path.join(os.homedir(), '.npm-global/lib/node_modules/node-edge-tts'),
    '/usr/local/lib/node_modules/node-edge-tts',
    '/opt/homebrew/lib/node_modules/node-edge-tts',
    'node-edge-tts'
].filter(Boolean);

for (const loc of ttsLocations) {
    try {
        EdgeTTS = require(loc).EdgeTTS;
        break;
    } catch {}
}

if (!EdgeTTS) {
    console.error('Error: node-edge-tts not found. Install with:');
    console.error('  npm install -g node-edge-tts');
    process.exit(1);
}

// Config file for persistence
const CONFIG_PATH = path.join(os.homedir(), '.claudevoice-config.json');

// Available Edge-TTS voices
const VOICES = [
    { id: 'en-US-ChristopherNeural', name: 'Christopher', desc: 'Deep, warm male voice' },
    { id: 'en-US-EricNeural', name: 'Eric', desc: 'Professional male voice' },
    { id: 'en-US-GuyNeural', name: 'Guy', desc: 'Friendly male voice' },
    { id: 'en-US-RogerNeural', name: 'Roger', desc: 'Mature, authoritative male' },
    { id: 'en-US-TonyNeural', name: 'Tony', desc: 'Energetic male voice' },
    { id: 'en-US-DavisNeural', name: 'Davis', desc: 'Young professional male' },
    { id: 'en-US-JasonNeural', name: 'Jason', desc: 'Casual male voice' },
    { id: 'en-US-AndrewNeural', name: 'Andrew', desc: 'Natural male voice' },
    { id: 'en-US-BrianNeural', name: 'Brian', desc: 'Clear male voice' },
    { id: 'en-GB-RyanNeural', name: 'Ryan (UK)', desc: 'British male voice' },
    { id: 'en-GB-ThomasNeural', name: 'Thomas (UK)', desc: 'Refined British male' },
    { id: 'en-AU-WilliamNeural', name: 'William (AU)', desc: 'Australian male voice' },
    { id: 'en-US-AriaNeural', name: 'Aria', desc: 'Pleasant female voice' },
    { id: 'en-US-JennyNeural', name: 'Jenny', desc: 'Friendly female voice' },
    { id: 'en-US-MichelleNeural', name: 'Michelle', desc: 'Professional female' }
];

// Check if message is tool-related (should be filtered)
function isToolRelatedMessage(message) {
    // Direct matches for common tool messages
    if (message.match(/^Update\s+Todos$/i) || 
        message.match(/^Updating\s+todo/i) ||
        message.match(/^Updated?\s+the\s+todo/i)) {
        return true;
    }
    
    // Common tool-related verbs (shortened for efficiency)
    const toolVerbs = /^(Updat|Modif|Chang|Add|Remov|Delet|Mark|Set|Clear|Reset|Edit|Creat|Writ|Read|Fetch|Load|Save|Track|Complet|Finish|Start|Init|Setup|Config|Install|Build|Run|Test|Deploy|Process|Analyz|Search|Check|Fix|Execut|Perform|Apply|Transform|Convert|Format|Import|Export|Generat|Calculat|Validat|Pars|Compil|Optimiz|Refactor|Migrat|Backup|Restor|Sync|Download|Upload)(ing|ed|e|es)?\s/i;
    
    // Check if message starts with a tool verb
    if (toolVerbs.test(message)) {
        // Additional check for common tool targets
        const toolTargets = /(todo|task|item|list|file|code|function|variable|config|setting|database|cache|state|status|progress|component|module|package|dependency|test|build|deployment)/i;
        return toolTargets.test(message);
    }
    
    return false;
}

// Check if message is todo-related content (should be filtered)
function isTodoContent(message) {
    // Direct todo list patterns - be specific to avoid filtering legitimate numbered content
    const todoPatterns = [
        /^Todo\s*\d*:/i,                          // Todo labels
        /^Task\s*\d*:/i,                          // Task labels
        /^Item\s*\d*:/i,                          // Item labels
        /^\[\s*\]/,                               // Checkboxes
        /^\[x\]/i,                                // Checked boxes
        /^(pending|in.?progress|completed)\s*(todo|task)/i,  // Status indicators with todo/task
        /^(high|medium|low)\s*priority\s*(todo|task)/i,      // Priority indicators with todo/task
        /todos?\s*list|task\s*list/i,            // List references
        /^Here'?s?\s*(the|my|your)?\s*todos?/i,  // Todo introductions
        /^Current\s*todos?:/i,                   // Current todo headers
        /^Todo\s*items?:/i,                      // Todo item headers
        /^The\s*todos?\s*(list|are|include)/i    // Todo descriptions
    ];
    
    return todoPatterns.some(pattern => pattern.test(message));
}

// Load saved config
function loadConfig() {
    try {
        if (fs.existsSync(CONFIG_PATH)) {
            return JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
        }
    } catch {}
    return { voice: 'en-US-BrianNeural' };
}

// Save config
function saveConfig(config) {
    try {
        fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
    } catch {}
}

// TTS setup
const config = loadConfig();
let currentVoice = config.voice;
let tts = new EdgeTTS({ voice: currentVoice });
let audioQueue = [];
let isPlaying = false;
let spokenMessages = new Set(); // Track what we've already spoken

// Track current audio process for killing
let currentAudioProcess = null;

// Play audio queue
async function playAudio() {
    if (isPlaying || audioQueue.length === 0) return;
    
    isPlaying = true;
    const text = audioQueue.shift();
    
    try {
        const tempFile = path.join(os.tmpdir(), `claude-${Date.now()}.mp3`);
        await tts.ttsPromise(text, tempFile);
        
        const player = process.platform === 'darwin' ? 'afplay' :
                       process.platform === 'win32' ? 'powershell' : 'aplay';
        const args = process.platform === 'win32' ? 
            ['-c', `(New-Object Media.SoundPlayer '${tempFile}').PlaySync()`] : [tempFile];
        
        currentAudioProcess = spawn(player, args, { stdio: 'ignore' });
        currentAudioProcess.on('exit', () => {
            try { fs.unlinkSync(tempFile); } catch {}
            currentAudioProcess = null;
            isPlaying = false;
            playAudio();
        });
    } catch {
        currentAudioProcess = null;
        isPlaying = false;
        playAudio();
    }
}

// Queue text for speaking
function speak(text) {
    const clean = text.trim();
    
    // Don't speak duplicates or partial duplicates
    if (spokenMessages.has(clean)) {
        return;
    }
    
    // Check if this is a substring of something we already spoke
    for (const spoken of spokenMessages) {
        if (spoken.includes(clean) || clean.includes(spoken)) {
            return;
        }
    }
    
    if (clean.length > 10) {
        spokenMessages.add(clean); // Remember what we've spoken
        audioQueue.push(clean);
        playAudio();
        
        // Clean up old messages after a while to prevent memory growth
        if (spokenMessages.size > 100) {
            const messages = Array.from(spokenMessages);
            messages.slice(0, 50).forEach(msg => spokenMessages.delete(msg));
        }
    }
}

// Stop all TTS immediately
function stopAllTTS() {
    // Clear the queue
    audioQueue = [];
    
    // Kill current audio if playing
    if (currentAudioProcess) {
        try {
            currentAudioProcess.kill('SIGKILL');
        } catch {}
        currentAudioProcess = null;
    }
    
    // Reset playing state
    isPlaying = false;
    
    // Clear spoken messages to allow re-speaking if needed
    spokenMessages.clear();
    
    // Reset message collection
    messageBuffer = [];
    collectingMessage = false;
    collectingThinking = false;
}

// Simple line processor
let messageBuffer = [];
let collectingMessage = false;
let inPlanMode = false;
let collectingThinking = false;
let thinkingMode = false;
let sawPlanPresentation = false;

function processLine(line) {
    // Check for //stfu command
    if (line.includes('//stfu') || line.includes('cvstfu!')) {
        stopAllTTS();
        return; // Don't process this line further
    }
    
    // Detect plan mode activation and presentation
    if (line.includes('/plan') || line.includes('exit_plan_mode')) {
        inPlanMode = true;
        spokenMessages.clear(); // Clear history to avoid re-reading
        return;
    }
    
    // Detect when plan is being presented for approval
    if (inPlanMode && (line.includes('approve this plan') || 
                       line.includes('exit plan mode') ||
                       line.includes('Review the plan'))) {
        sawPlanPresentation = true;
        return;
    }
    
    // If we're in plan mode after presentation, wait for new content
    if (sawPlanPresentation) {
        // Reset flags when we see new user input or Claude response
        const cleanLine = line.replace(/\x1b\[[^m]*m/g, '').trim();
        if (cleanLine.includes('❯') || cleanLine.includes('$') || cleanLine.startsWith('⏺')) {
            sawPlanPresentation = false;
            inPlanMode = false;
        } else {
            return; // Skip old content being re-displayed
        }
    }
    
    // Check for /compact command
    if (line.includes('/compact')) {
        // Clear spoken messages to avoid re-reading compacted history
        spokenMessages.clear();
        return;
    }
    
    // Skip lines that look like conversation history
    const strippedForCheck = line.replace(/\x1b\[[^m]*m/g, '').trim();
    if (strippedForCheck.startsWith('Human:') || 
        strippedForCheck.startsWith('Assistant:') ||
        strippedForCheck.match(/^\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}/) ||
        strippedForCheck.includes('Conversation compacted')) {
        return;
    }
    
    // Filter out OSC sequences (]99;...) and other terminal control sequences
    if (line.includes('\x1b]99;') || line.includes(']99;') || line.includes('\x1b[?1004')) {
        return;
    }
    
    // Filter out lines containing only escape sequences and control chars
    const strippedLine = line.replace(/\x1b\[[^m]*m/g, '').replace(/\x1b\]?[^\x1b\x07]*[\x1b\x07]/g, '');
    const cleanLine = strippedLine.trim();
    
    // Skip empty or very short lines
    if (cleanLine.length < 3) {
        return;
    }
    
    // Skip approval-related content entirely
    const isApprovalRelated = (
        // Approval options
        cleanLine.match(/^(1|2|3)\.\s*(Allow|Always allow|Decline)/i) ||
        cleanLine.includes('Allow this time') ||
        cleanLine.includes('Always allow') ||
        cleanLine.includes('Decline and give feedback') ||
        // Approval prompts
        cleanLine.includes('Do you want to') ||
        (cleanLine.includes('approval') && cleanLine.includes('?')) ||
        cleanLine.includes('permission to') ||
        cleanLine.includes('Would you like') ||
        cleanLine.includes('Shall I') ||
        cleanLine.includes('Should I') ||
        cleanLine.includes('needs permission to') ||
        cleanLine.includes('requires approval')
    );
    
    if (isApprovalRelated) {
        return; // Skip all approval-related content
    }
    
    // Filter out only specific known garbage patterns (be less aggressive)
    if (cleanLine.match(/^\??\d{3,4}[lh]\d*$/i) ||   // Terminal sequences like "?1004l", "1004l99"
        cleanLine.match(/^(1a2k|2k1a|1004l|99|2k|1a|1004l99|two\s*k\s*one\s*a)$/i) || // Exact known garbage
        cleanLine.match(/^[lh]$/i) ||                // Single l or h
        cleanLine.match(/^((2k1a|two\s*k\s*one\s*a)\s*)+g?$/i) || // Repeated 2k1a patterns
        cleanLine === 'g' ||                        // Single 'g' character
        (cleanLine.length < 3 && !cleanLine.match(/^\d+$/))) { // Very short non-numeric lines
        return;
    }
    
    // Check for thinking bullet (✻) when in thinking mode
    if (thinkingMode && cleanLine.startsWith('✻ Thinking')) {
        // Start collecting thinking content
        collectingThinking = true;
        messageBuffer = [];
        return;
    }
    
    // If we're collecting thinking content
    if (collectingThinking) {
        // Skip empty lines at the start
        if (!cleanLine && messageBuffer.length === 0) {
            return;
        }
        
        // Filter out specific UI status lines (exact matches only)
        if (cleanLine.match(/^\d+\s+tokens.*esc\s+to\s+interrupt$/i) || // "123 tokens esc to interrupt"
            cleanLine.match(/^esc\s+to\s+interrupt$/i) ||               // "esc to interrupt"
            cleanLine.match(/^\d+→\d+$/)) {                              // Line number format "10→20"
            return; // Skip these specific UI elements
        }
        
        // Stop when we hit the next indicator or end of thinking
        if (cleanLine.startsWith('⏺') ||
            cleanLine.startsWith('✻') ||
            cleanLine.startsWith('✽') ||
            cleanLine.startsWith('·') ||
            !cleanLine) {
            
            // Speak what we collected
            if (messageBuffer.length > 0) {
                const fullMessage = messageBuffer.join(' ').trim();
                if (fullMessage.length > 10) {
                    speak(fullMessage);
                }
            }
            messageBuffer = [];
            collectingThinking = false;
            
            // Continue processing this line normally if it's a new indicator
        } else {
            // Add thinking content to buffer
            messageBuffer.push(cleanLine.trim());
            return;
        }
    }
    
    // Check for white bullet (⏺)
    if (cleanLine.startsWith('⏺')) {
        // Extract message after bullet
        const afterBullet = cleanLine.substring(1).trim();
        
        // Filter out tool calls and todo content
        if (afterBullet && 
            !afterBullet.match(/^\w+\(/) &&  // Function calls
            !isToolRelatedMessage(afterBullet) &&
            !isTodoContent(afterBullet) &&
            afterBullet.length > 10) {
            
            messageBuffer = [afterBullet];
            collectingMessage = true;
        }
        return;
    }
    
    // If we're collecting a message
    if (collectingMessage) {
        // Stop on empty line, UI elements, or todo content
        if (!cleanLine || 
            cleanLine.startsWith('⏺') ||
            cleanLine.startsWith('✻') ||
            cleanLine.startsWith('✽') ||
            cleanLine.startsWith('·') ||
            isTodoContent(cleanLine)) {
            
            // Speak what we collected
            if (messageBuffer.length > 0) {
                const fullMessage = messageBuffer.join(' ');
                speak(fullMessage);
            }
            messageBuffer = [];
            collectingMessage = false;
        } else if (!isTodoContent(cleanLine)) {
            // Add non-todo line to message buffer
            messageBuffer.push(cleanLine);
        }
    }
}

// Find claude
function findClaude() {
    const paths = ['claude', '/usr/local/bin/claude', '/opt/homebrew/bin/claude'];
    for (const p of paths) {
        try {
            require('child_process').execSync(`which ${p}`, { stdio: 'ignore' });
            return p;
        } catch {}
    }
    console.error('Claude Code CLI not found');
    process.exit(1);
}

// Show voice menu (standalone)
function showVoiceMenu() {
    console.log('\n🎙️  ClaudeVoice Settings\n');
    console.log('Available voices:\n');
    
    VOICES.forEach((voice, index) => {
        const isCurrent = voice.id === currentVoice;
        const marker = isCurrent ? '►' : ' ';
        const num = String(index + 1).padStart(2, ' ');
        const name = voice.name.padEnd(15);
        console.log(`${marker} ${num}. ${name} ${voice.desc}`);
    });
    
    console.log(`\nCurrent voice: ${VOICES.find(v => v.id === currentVoice)?.name || 'Unknown'}`);
    console.log('\nTo change voice, run: claudevoice --voice <number>');
}

// Main
let args = process.argv.slice(2);

// Handle special commands
if (args[0] === '--help') {
    console.log('ClaudeVoice - TTS for Claude Code');
    console.log('Usage: claudevoice [options] [claude arguments]');
    console.log('\nOptions:');
    console.log('  --voice <number>  Change voice (1-15)');
    console.log('  --list-voices     List available voices');
    console.log('  --thinking-mode   Include Claude\'s thinking output');
    console.log('  --help            Show this help');
    process.exit(0);
} else if (args[0] === '--list-voices') {
    showVoiceMenu();
    process.exit(0);
} else if (args[0] === '--voice' && args[1]) {
    const num = parseInt(args[1]);
    if (num >= 1 && num <= VOICES.length) {
        const newVoice = VOICES[num - 1];
        config.voice = newVoice.id;
        saveConfig(config);
        console.log(`✓ Voice changed to ${newVoice.name}`);
        
        // Test the new voice
        currentVoice = newVoice.id;
        tts = new EdgeTTS({ voice: currentVoice });
        audioQueue.push(`Hello! I'm ${newVoice.name}, your new Claude Code voice.`);
        playAudio();
        
        setTimeout(() => process.exit(0), 3000);
    } else {
        console.error('Invalid voice number. Use --list-voices to see options.');
        process.exit(1);
    }
    return;
}

// Check for thinking mode
if (args.includes('--thinking-mode')) {
    thinkingMode = true;
    args = args.filter(arg => arg !== '--thinking-mode');
}

// Filter out our own arguments
let claudeArgs = args;
if (args[0] === '--voice') {
    claudeArgs = args.slice(2);
}

// Join args if needed
if (claudeArgs.length > 0 && !claudeArgs[0].startsWith('-')) {
    claudeArgs = [claudeArgs.join(' ')];
}

// Spawn claude with script for TTY
const claudeBin = findClaude();
const command = '/usr/bin/script';
const commandArgs = ['-q', '/dev/null', claudeBin, ...claudeArgs];

const claude = spawn(command, commandArgs, {
    stdio: ['inherit', 'pipe', 'inherit'],
    env: { ...process.env, TERM: 'xterm-256color' },
    shell: false
});

// Process output line by line
let buffer = '';
claude.stdout.on('data', (chunk) => {
    // Pass through to terminal
    process.stdout.write(chunk);
    
    // Buffer for line processing
    buffer += chunk.toString();
    const lines = buffer.split('\n');
    buffer = lines.pop() || '';
    
    // Process each complete line
    for (const line of lines) {
        processLine(line);
    }
});

// Handle exit
claude.on('exit', (code) => {
    // Process any remaining buffer
    if (buffer) {
        processLine(buffer);
    }
    
    // Final message if still collecting
    if (collectingMessage && messageBuffer.length > 0) {
        speak(messageBuffer.join(' '));
    }
    
    setTimeout(() => process.exit(code || 0), 200);
});

// Handle interrupt
process.on('SIGINT', () => {
    audioQueue = [];
    spokenMessages.clear();
    claude.kill('SIGINT');
});