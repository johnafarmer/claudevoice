#!/usr/bin/env node

/**
 * ClaudeVoice - Simple and working with voice selection
 */

const { spawn } = require('child_process');
const os = require('os');
const fs = require('fs');
const path = require('path');

// Load Edge-TTS
let EdgeTTS;

// Get npm global root dynamically
let npmGlobalRoot;
try {
    npmGlobalRoot = require('child_process')
        .execSync('npm root -g', { encoding: 'utf8' })
        .trim();
} catch {}

const ttsLocations = [
    './node_modules/node-edge-tts',
    npmGlobalRoot && path.join(npmGlobalRoot, 'node-edge-tts'),
    path.join(os.homedir(), '.npm-global/lib/node_modules/node-edge-tts'),
    '/usr/local/lib/node_modules/node-edge-tts',
    '/opt/homebrew/lib/node_modules/node-edge-tts',
    'node-edge-tts'
].filter(Boolean);

for (const loc of ttsLocations) {
    try {
        EdgeTTS = require(loc).EdgeTTS;
        break;
    } catch {}
}

if (!EdgeTTS) {
    console.error('Error: node-edge-tts not found. Install with:');
    console.error('  npm install -g node-edge-tts');
    process.exit(1);
}

// Config file for persistence
const CONFIG_PATH = path.join(os.homedir(), '.claudevoice-config.json');

// Available Edge-TTS voices
const VOICES = [
    { id: 'en-US-ChristopherNeural', name: 'Christopher', desc: 'Deep, warm male voice' },
    { id: 'en-US-EricNeural', name: 'Eric', desc: 'Professional male voice' },
    { id: 'en-US-GuyNeural', name: 'Guy', desc: 'Friendly male voice' },
    { id: 'en-US-RogerNeural', name: 'Roger', desc: 'Mature, authoritative male' },
    { id: 'en-US-TonyNeural', name: 'Tony', desc: 'Energetic male voice' },
    { id: 'en-US-DavisNeural', name: 'Davis', desc: 'Young professional male' },
    { id: 'en-US-JasonNeural', name: 'Jason', desc: 'Casual male voice' },
    { id: 'en-US-AndrewNeural', name: 'Andrew', desc: 'Natural male voice' },
    { id: 'en-US-BrianNeural', name: 'Brian', desc: 'Clear male voice' },
    { id: 'en-GB-RyanNeural', name: 'Ryan (UK)', desc: 'British male voice' },
    { id: 'en-GB-ThomasNeural', name: 'Thomas (UK)', desc: 'Refined British male' },
    { id: 'en-AU-WilliamNeural', name: 'William (AU)', desc: 'Australian male voice' },
    { id: 'en-US-AriaNeural', name: 'Aria', desc: 'Pleasant female voice' },
    { id: 'en-US-JennyNeural', name: 'Jenny', desc: 'Friendly female voice' },
    { id: 'en-US-MichelleNeural', name: 'Michelle', desc: 'Professional female' }
];

// Load saved config
function loadConfig() {
    try {
        if (fs.existsSync(CONFIG_PATH)) {
            return JSON.parse(fs.readFileSync(CONFIG_PATH, 'utf8'));
        }
    } catch {}
    return { voice: 'en-US-ChristopherNeural' };
}

// Save config
function saveConfig(config) {
    try {
        fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
    } catch {}
}

// TTS setup
const config = loadConfig();
let currentVoice = config.voice;
let tts = new EdgeTTS({ voice: currentVoice });
let audioQueue = [];
let isPlaying = false;
let spokenMessages = new Set(); // Track what we've already spoken

// Play audio queue
async function playAudio() {
    if (isPlaying || audioQueue.length === 0) return;
    
    isPlaying = true;
    const text = audioQueue.shift();
    
    try {
        const tempFile = path.join(os.tmpdir(), `claude-${Date.now()}.mp3`);
        await tts.ttsPromise(text, tempFile);
        
        const player = process.platform === 'darwin' ? 'afplay' :
                       process.platform === 'win32' ? 'powershell' : 'aplay';
        const args = process.platform === 'win32' ? 
            ['-c', `(New-Object Media.SoundPlayer '${tempFile}').PlaySync()`] : [tempFile];
        
        const proc = spawn(player, args, { stdio: 'ignore' });
        proc.on('exit', () => {
            try { fs.unlinkSync(tempFile); } catch {}
            isPlaying = false;
            playAudio();
        });
    } catch {
        isPlaying = false;
        playAudio();
    }
}

// Queue text for speaking
function speak(text) {
    const clean = text.trim();
    
    // Don't speak duplicates
    if (spokenMessages.has(clean)) {
        return;
    }
    
    if (clean.length > 10) {
        spokenMessages.add(clean); // Remember what we've spoken
        audioQueue.push(clean);
        playAudio();
    }
}

// Simple line processor
let messageBuffer = [];
let collectingMessage = false;
let recentApproval = false;

function processLine(line) {
    const cleanLine = line.replace(/\x1b\[[0-9;]*m/g, '').trim();
    
    // Skip garbage after recent approval prompts
    if (recentApproval) {
        // Check if this looks like garbage
        if (cleanLine.match(/^[0-9]+[a-z]+[0-9]*$/i) || 
            cleanLine.match(/^1a2k|2k1a|1004l/i) ||
            cleanLine.length < 5) {
            return;
        }
        // Otherwise clear the flag
        recentApproval = false;
    }
    
    // Check for white bullet (⏺)
    if (cleanLine.startsWith('⏺')) {
        // Extract message after bullet
        const afterBullet = cleanLine.substring(1).trim();
        
        // Filter out tool calls and MCP events
        if (afterBullet && 
            !afterBullet.includes('(MCP)') &&
            !afterBullet.includes('asana:') &&
            !afterBullet.includes('github:') &&
            !afterBullet.includes('obsidian:') &&
            !afterBullet.startsWith('Using') &&
            !afterBullet.match(/^\w+\(/) &&  // Function calls like "search("
            afterBullet.length > 10) {
            
            messageBuffer = [afterBullet];
            collectingMessage = true;
        }
        return;
    }
    
    // If we're collecting a message
    if (collectingMessage) {
        // Stop on empty line, UI elements, or tool calls
        if (!cleanLine || 
            cleanLine.startsWith('✻') ||
            cleanLine.startsWith('✽') ||
            cleanLine.startsWith('·') ||
            cleanLine.startsWith('╭') ||
            cleanLine.startsWith('│') ||
            cleanLine.startsWith('╰') ||
            cleanLine.includes('tokens') ||
            cleanLine.includes('esc to interrupt') ||
            cleanLine.includes('(MCP)') ||
            cleanLine.includes('asana:') ||
            cleanLine.includes('github:') ||
            cleanLine.includes('obsidian:') ||
            cleanLine.startsWith('Using') ||
            cleanLine.match(/^\w+\(/)) {
            
            // Speak what we collected
            if (messageBuffer.length > 0) {
                const fullMessage = messageBuffer.join(' ');
                speak(fullMessage);
            }
            messageBuffer = [];
            collectingMessage = false;
        } else {
            // Add non-empty line to message
            messageBuffer.push(cleanLine);
        }
    }
    
    // Special handling for approval prompts
    if (!collectingMessage && cleanLine.length > 20) {
        if (cleanLine.includes('Do you want to') ||
            cleanLine.includes('approval') ||
            cleanLine.includes('permission') ||
            cleanLine.includes('Would you like') ||
            cleanLine.includes('Shall I') ||
            cleanLine.includes('Should I')) {
            
            // Make sure it's not a tool output
            if (!cleanLine.includes('(MCP)') && 
                !cleanLine.includes('⎿') &&
                !cleanLine.startsWith('{')) {
                speak(cleanLine);
                recentApproval = true;
                
                // Clear flag after a short delay
                setTimeout(() => {
                    recentApproval = false;
                }, 2000);
            }
        }
    }
}

// Find claude
function findClaude() {
    const paths = ['claude', '/usr/local/bin/claude', '/opt/homebrew/bin/claude'];
    for (const p of paths) {
        try {
            require('child_process').execSync(`which ${p}`, { stdio: 'ignore' });
            return p;
        } catch {}
    }
    console.error('Claude Code CLI not found');
    process.exit(1);
}

// Show voice menu (standalone)
function showVoiceMenu() {
    console.log('\n🎙️  ClaudeVoice Settings\n');
    console.log('Available voices:\n');
    
    VOICES.forEach((voice, index) => {
        const isCurrent = voice.id === currentVoice;
        const marker = isCurrent ? '►' : ' ';
        const num = String(index + 1).padStart(2, ' ');
        const name = voice.name.padEnd(15);
        console.log(`${marker} ${num}. ${name} ${voice.desc}`);
    });
    
    console.log(`\nCurrent voice: ${VOICES.find(v => v.id === currentVoice)?.name || 'Unknown'}`);
    console.log('\nTo change voice, run: claudevoice --voice <number>');
}

// Main
const args = process.argv.slice(2);

// Handle special commands
if (args[0] === '--help') {
    console.log('ClaudeVoice - TTS for Claude Code');
    console.log('Usage: claudevoice [options] [claude arguments]');
    console.log('\nOptions:');
    console.log('  --voice <number>  Change voice (1-15)');
    console.log('  --list-voices     List available voices');
    console.log('  --help            Show this help');
    process.exit(0);
} else if (args[0] === '--list-voices') {
    showVoiceMenu();
    process.exit(0);
} else if (args[0] === '--voice' && args[1]) {
    const num = parseInt(args[1]);
    if (num >= 1 && num <= VOICES.length) {
        const newVoice = VOICES[num - 1];
        config.voice = newVoice.id;
        saveConfig(config);
        console.log(`✓ Voice changed to ${newVoice.name}`);
        
        // Test the new voice
        currentVoice = newVoice.id;
        tts = new EdgeTTS({ voice: currentVoice });
        audioQueue.push(`Hello! I'm ${newVoice.name}, your new Claude Code voice.`);
        playAudio();
        
        setTimeout(() => process.exit(0), 3000);
    } else {
        console.error('Invalid voice number. Use --list-voices to see options.');
        process.exit(1);
    }
    return;
}

// Filter out our own arguments
let claudeArgs = args;
if (args[0] === '--voice') {
    claudeArgs = args.slice(2);
}

// Join args if needed
if (claudeArgs.length > 0 && !claudeArgs[0].startsWith('-')) {
    claudeArgs = [claudeArgs.join(' ')];
}

// Spawn claude with script for TTY
const claudeBin = findClaude();
const command = '/usr/bin/script';
const commandArgs = ['-q', '/dev/null', claudeBin, ...claudeArgs];

const claude = spawn(command, commandArgs, {
    stdio: ['inherit', 'pipe', 'inherit'],
    env: { ...process.env, TERM: 'xterm-256color' },
    shell: false
});

// Process output line by line
let buffer = '';
claude.stdout.on('data', (chunk) => {
    // Pass through to terminal
    process.stdout.write(chunk);
    
    // Buffer for line processing
    buffer += chunk.toString();
    const lines = buffer.split('\n');
    buffer = lines.pop() || '';
    
    // Process each complete line
    for (const line of lines) {
        processLine(line);
    }
});

// Handle exit
claude.on('exit', (code) => {
    // Process any remaining buffer
    if (buffer) {
        processLine(buffer);
    }
    
    // Final message if still collecting
    if (collectingMessage && messageBuffer.length > 0) {
        speak(messageBuffer.join(' '));
    }
    
    setTimeout(() => process.exit(code || 0), 200);
});

// Handle interrupt
process.on('SIGINT', () => {
    audioQueue = [];
    spokenMessages.clear();
    claude.kill('SIGINT');
});